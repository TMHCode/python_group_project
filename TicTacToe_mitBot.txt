# Import the Tkinter library
import Tkinter
import random

# Create a new Tkinter window
window = Tkinter.Tk()

# Define the game board as a 2D list of strings
# with '-' representing an empty cell
game_board = [
    ["-", "-", "-"],
    ["-", "-", "-"],
    ["-", "-", "-"]
]

# Function to draw the game board on the screen
def draw_board():
    for row_index, row in enumerate(game_board):
        for col_index, cell in enumerate(row):
            # Create a new Tkinter label for each cell
            # and grid it in the window
            label = Tkinter.Label(window, text=cell, font=("Helvetica", 32))
            label.grid(row=row_index, column=col_index)

# Function to check if the game has been won by one of the players
# Returns the player symbol if the game is won, or None if not
def check_game_won():
    # Check rows
    for row in game_board:
        if row[0] != "-" and row[0] == row[1] and row[1] == row[2]:
            return row[0]

    # Check columns
    for col_index in range(3):
        if game_board[0][col_index] != "-" and game_board[0][col_index] == game_board[1][col_index] and game_board[1][col_index] == game_board[2][col_index]:
            return game_board[0][col_index]

    # Check diagonals
    if game_board[0][0] != "-" and game_board[0][0] == game_board[1][1] and game_board[1][1] == game_board[2][2]:
        return game_board[0][0]
    if game_board[0][2] != "-" and game_board[0][2] == game_board[1][1] and game_board[1][1] == game_board[2][0]:
        return game_board[0][2]

    # If none of the winning conditions are met, the game is not won
    return None

# Function to handle a player's move
def player_move(player_symbol):
    # Prompt the player for their move
    row = int(input("Enter row (1, 2, or 3): ")) - 1
    col = int(input("Enter column (1, 2, or 3): ")) - 1

    # Check if the move is valid (i.e. the cell is empty)
    if game_board[row][col] == "-":
        # If the move is valid, update the game board
        game_board[row][col] = player_symbol

        # Redraw the game board
        draw_board()

        # Check if the game has been won
        game_won = check_game_won()
        if game_won is not None:
            # If the game is won

# If the game is won, display a message and exit
        print(f"{game_won} wins!")
        exit()
    else:
        # If the move is not valid, display a message
        print("Invalid move, try again.")

# Function to handle the bot's move
def bot_move(bot_symbol):
    # Find all empty cells on the game board
    empty_cells = []
    for row_index, row in enumerate(game_board):
        for col_index, cell in enumerate(row):
            if cell == "-":
                empty_cells.append((row_index, col_index))

    # Choose a random empty cell for the bot's move
    if empty_cells:
        row, col = random.choice(empty_cells)
        game_board[row][col] = bot_symbol
    else:
        # If there are no empty cells, the game is a draw
        print("It's a draw!")
        exit()

    # Redraw the game board
    draw_board()

    # Check if the game has been won
    game_won = check_game_won()
    if game_won is not None:
        # If the game is won, display a message and exit
        print(f"{game_won} wins!")
        exit()

# Draw the initial game board
draw_board()

# Main game loop
while True:
    # Player X makes a move
    player_move("X")

    # Player O (the bot) makes a move
    bot_move("O")